/*
 * Copyright (c) 2016 deltaDNA Ltd. All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
}

buildscript {
    ext {
        kotlinVersion = '1.0.6'
        // can't update to 8.4.0 due to https://code.google.com/p/android/issues/detail?id=187483
        // N.B in 'AdvertisingIdClient' class has been moved in 8.* to 'basement' package
        // https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient
        playServicesVersion = '10.0.1'
        supportVersion = '25.1.0'
        
        logTagName  = 'LOG_TAG'
        logTagValue = 'deltaDNA'
    }
    
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
        classpath 'gradle.plugin.com.nimbledroid:gradle-profiler:1.0.8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'http://deltadna.bintray.com/android' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://edinlin01:8082/artifactory/libs-snapshot-local' }
    }
}

subprojects {
    def isLibrary = it.name.startsWith('library') || it.name.startsWith("provider")
    
    if (isLibrary) {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'jacoco-android'
    } else {
        apply plugin: 'com.android.application'
        apply plugin: 'com.nimbledroid.profiler'
    }
    
    if (isLibrary) {
        // workaround for group/version not picked up through project() dependency
        group = GROUP
        version = VERSION_NAME
    }
    
    android {
        compileSdkVersion 25
        buildToolsVersion '25'
        
        defaultConfig {
            minSdkVersion 15
            targetSdkVersion 25
            
            versionCode 1
            versionName VERSION_NAME
            
            buildConfigField('String', logTagName, "\"$logTagValue\"")
            
            if (isLibrary) {
                archivesBaseName = "${POM_ARTIFACT_ID}-${versionName}.${System.getenv("BUILD_NUMBER") ?: getSha()}"
                
                consumerProguardFiles 'proguard.cfg'
            }
        }
        
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
        
        if (isLibrary) {
            sourceSets {
                test.java.srcDirs += 'src/test/kotlin'
            }
            
            testOptions {
                unitTests.returnDefaultValues = true
            }
            
            buildTypes {
                debug {
                    testCoverageEnabled true
                }
            }
        }
    }
    
    if (isLibrary) {
        dependencies {
            testCompile 'com.github.salomonbrys.kotson:kotson:2.5.0'
            testCompile 'com.google.truth:truth:0.31'
            testCompile 'com.nhaarman:mockito-kotlin:1.3.0'
            testCompile 'junit:junit:4.12'
            testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
            testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
            testCompile 'org.json:json:20160212'
            testCompile 'org.mockito:mockito-core:2.7.4'
            testCompile 'org.robolectric:robolectric:3.2.2'
        }
    }
    
    if (!isLibrary && project.hasProperty('nimbleDroidApiKey')) {
        nimbledroid {
            apiKey nimbleDroidApiKey
        }
    }
    
    if (isLibrary) {
        apply from: "$rootProject.projectDir/gradle/mvn-push.gradle"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def getSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}
